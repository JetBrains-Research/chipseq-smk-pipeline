#!/usr/bin/env python
import re
from glob import glob
import os


def fastq_files():
    return glob(os.path.join(config["fastq_dir"], "*.f*q"))


def fastq_names():
    return [os.path.splitext(os.path.basename(fastq_file))[0] for fastq_file in fastq_files()]


def fastq_common_names_paired():
    basenames = {os.path.splitext(fastq_file)[0] for fastq_file in fastq_files()}
    paired_candidates = [basename[:-2] for basename in basenames if basename[-2:] == "_1"]
    return [os.path.basename(common_name) for common_name in paired_candidates if common_name + "_2" in basenames]


def fastq_names_single():
    common_names = fastq_common_names_paired()
    return [fastq_name for fastq_name in fastq_names()
            if fastq_name[-2:] not in ["_1", "_2"] or fastq_name[:-2] not in common_names]


def fastq_aligned_names():
    return fastq_common_names_paired() + fastq_names_single()


def with_log(cmd, append=False):
    if append:
        return "({cmd}) &>> {{log}}".format(cmd=cmd)
    else:
        return "({cmd}) &> {{log}}".format(cmd=cmd)


def macs_species(genome):
    """Convert genome to macs2 species encoding"""
    if re.match('^hg[0-9]+$', genome):
        return 'hs'
    elif re.match('^mm[0-9]+$', genome):
        return 'mm'
    raise Exception('Unknown species {}'.format(genome))


def effective_genome_fraction(genome, chrom_sizes_path):
    """From MACS2 documentation:
    The default hs 2.7e9 is recommended for UCSC human hg18 assembly.
    Here are all precompiled parameters for effective genome size:
    hs: 2.7e9
    mm: 1.87e9
    ce: 9e7
    dm: 1.2e8"""
    with open(chrom_sizes_path, 'r') as chrom_sizes:
        chrom_length = sum([int(line.split('\t')[1]) for line in chrom_sizes if 'chr_' not in line])
    if genome.startswith('mm'):
        size = 1.87e9
    elif genome.startswith('hg'):
        size = 2.7e9
    else:
        raise Exception('Unknown species {}'.format(genome))
    return size / chrom_length


workdir: config["work_dir"]


rule all:
    input:
        multiqc="multiqc_report.html",
        multiqc_bams="bams/multiqc_report.html",
        bws=expand("bws/{sample}.bw", sample=fastq_aligned_names()),
        bam_qc=expand("bams/qc/{sample}.phantom.tsv", sample=fastq_aligned_names()),
        bam_qc_pbc=expand("bams/qc/{sample}.pbc_nrf.tsv", sample=fastq_aligned_names()),
        bams_unique=expand("bams_unique/{sample}_unique.bam", sample=fastq_aligned_names()),
        macs2_broad_peaks=expand("macs2_broad_0.1/{sample}_broad_0.1_peaks.broadPeak", sample=fastq_aligned_names()),
        macs2_peaks=expand("macs2_q0.05/{sample}_q0.05_peaks.narrowPeak", sample=fastq_aligned_names()),
        sicer_peaks=expand("sicer/{sample}-W200-G600-E100.scoreisland", sample=fastq_aligned_names()),
        span_peaks=expand("span/{sample}_0.01_5.peak", sample=fastq_aligned_names())
    shell: 'echo {input}'


rule download_chrom_sizes:
    output: "{}.chrom.sizes".format(config["genome"])
    shell: 'wget -nc -O {output} '
           'http://hgdownload.cse.ucsc.edu/goldenPath/{config[genome]}/bigZips/{config[genome]}.chrom.sizes'


rule download_fa:
    output: directory("fa")
    shell: 'rsync -avz --partial --exclude="*.txt" '
           'rsync://hgdownload.cse.ucsc.edu/goldenPath/{config[genome]}/chromosomes/ {output} && '
           'gunzip -f {output}/*.fa.gz'


rule clip_to_bw:
    input:
        clip="bws/{sample}_sorted.clip",
        cs=rules.download_chrom_sizes.output
    output: "bws/{sample}.bw"
    shell: 'bedGraphToBigWig {input.clip} {input.cs} {output}'


rule clip_sort:
    input: "bws/{sample}.clip"
    output: temp("bws/{sample}_sorted.clip")
    shadow: "minimal"
    params:
        tmp_dir="tmp"
    shell: 'mkdir -p {params.tmp_dir} && '
           'LC_COLLATE=C sort -k1,1 -k2,2n -T {params.tmp_dir} {input} > {output}'


rule bdg_to_clip:
    input:
        bdg="bws/{sample}.bdg",
        cs=rules.download_chrom_sizes.output
    output: temp("bws/{sample}.clip")
    shell: 'bedtools slop -i {input.bdg} -g {input.cs} -b 0 | bedClip stdin {input.cs} {output}'


rule bam_to_bdg:
    input:
        bam="bams/{sample}.bam",
        cs=rules.download_chrom_sizes.output
    output: temp("bws/{sample}.bdg")
    shell: 'bedtools genomecov -ibam {input.bam} -bg -g {input.cs} > {output}'


rule multiqc_bams:
    input: expand("bams/{sample}.log", sample=fastq_aligned_names())
    output: "bams/multiqc_report.html"
    shell: 'multiqc -fo bams bams'


rule align_single_sam:
    input:
        fastq=os.path.join(config["fastq_dir"], "{sample}.fastq"),
        indexes=directory("indexes")
    output: temp("bams/{sample}.sam")
    threads: 4
    log: "bams/{sample}.log"
    shell: 'bowtie -p {threads} -St -m 1 -v 3 --trim5 5 --best --strata {config[genome]} {input.fastq} {output}'


rule align_paired_sam:
    input:
        first=os.path.join(config["fastq_dir"], "{sample}_1.fastq"),
        second=os.path.join(config["fastq_dir"], "{sample}_2.fastq"),
        indexes=directory("indexes")
    output: temp("bams/{sample}.sam")
    threads: 4
    log: "bams/{sample}.log"
    shell: with_log("""
bowtie -p {threads} -St -m 1 -v 3 --trim5 5 --best --strata {config[genome]} \ 
-1 {input.first} -2 {input.second} {output}
""")


rule sam_to_unsorted_bam:
    input: "bams/{sample}.sam"
    output: temp("bams/{sample}_not_sorted.bam")
    shell: 'samtools view -bS {input} -o {output}'


rule sort_bam:
    input: "bams/{sample}_not_sorted.bam"
    output: "bams/{sample, (?:(?!_not_sorted$).)*}.bam"
    shell: 'samtools sort {input} -o {output}'


rule multiqc:
    input: expand("fastqc/{sample}_fastqc.html", sample=fastq_names())
    output: "multiqc_report.html"
    shell: 'multiqc -fo . fastqc'


rule fastqc:
    input: os.path.join(config["fastq_dir"], "{sample}.fastq")
    output: "fastqc/{sample}_fastqc.html"
    shell: 'fastqc --outdir fastqc "{input}"'


rule index_bowtie:
    input: directory("fa")
    output: directory("indexes")
    params:
        files_list=lambda wildcards: ','.join(glob("fa/*.fa")),
        target="indexes/{genome}".format(genome=config["genome"])
    shell: 'mkdir -p {output} && '
           'bowtie-build {params.files_list} {params.target}'


rule download_phantompeakqualtools:
    output: directory("bin/phantompeakqualtools")
    params:
        targz="phantompeakqualtools.tar.gz"
    shell: 'cd bin && '
           'curl --location '
           'https://storage.googleapis.com/google-code-archive-downloads/v2/'
           'code.google.com/phantompeakqualtools/ccQualityControl.v.1.1.tar.gz '
           '--output {params.targz} && '
           'tar xvf {params.targz}'


rule bam_qc_phantom:
    input:
        ppqt_dir=rules.download_phantompeakqualtools.output,
        bam="bams/{sample}.bam"
    output: "bams/qc/{sample}.phantom.tsv"
    params:
        run_spp=lambda wildcards, input: os.path.join(str(input.ppqt_dir), "run_spp.R")
    shell: 'Rscript {params.run_spp} -c={input.bam} -savp -out={output} -rf'


rule bam_to_pileup:
    input: "bams/{sample}.bam"
    output: temp("bams/pileup/{sample}.bed")
    shell: 'bedtools bamtobed -i {input} > {output}'


rule bam_qc_pbc_nrf:
    input: rules.bam_to_pileup.output
    output: "bams/qc/{sample}.pbc_nrf.tsv"
    shadow: "minimal"
    params:
        tmp_dir="tmp"
    shell: """
mkdir -p {params.tmp_dir} &&
(T=$'\\t'
>&2 echo "TotalReadPairs${{T}}DistinctReadPairs${{T}}OneReadPair${{T}}TwoReadPairs${{T}}\
NRF=Distinct/Total${{T}}PBC1=OnePair/Distinct${{T}}PBC2=OnePair/TwoPair"

cat {input} | \
    sort -k1,1 -k3,3n -k2,2n -k6,6 -T {params.tmp_dir} | \
    awk -v OFS='\\t' '{{print $1,$2,$3,$6}}' | uniq -c | \
    awk 'BEGIN{{mt=0;m0=0;m1=0;m2=0}}
    ($1==1){{m1=m1+1}} ($1==2){{m2=m2+1}} {{m0=m0+1}} {{mt=mt+$1}}
    END{{
        if (mt!=0){{m0_t=m0/mt}} else {{m0_t=-1.0}};
        if (m0!=0){{m1_0=m1/m0}} else {{m1_0=-1.0}};
        if (m2!=0){{m1_2=m1/m2}} else {{m1_2=-1.0}};
        printf "%d\\t%d\\t%d\\t%d\\t%f\\t%f\\t%f\\n",mt,m0,m1,m2,m0_t,m1_0,m1_2;
    }}') > {output}
    """


rule download_picard:
    output: "bin/picard.jar"
    shell: 'curl --location https://github.com/broadinstitute/picard/releases/download/2.18.22/picard.jar '
           '--output {output}'


rule bam_unique:
    input:
        bam="bams/{sample}.bam",
        picard=rules.download_picard.output
    output:
        bam="bams_unique/{sample}_unique.bam",
        metrics="bams_unique/{sample}_metrics.txt"
    threads: 4
    params:
        tmp_dir="tmp", gct_threads=lambda wildcards, threads: threads - 1
    log: "bams_unique/{sample}_picard.log"
    shadow: "minimal"
    shell: with_log("""
mkdir -p {params.tmp_dir};
java -Djava.io.tmpdir="{params.tmp_dir}" -Xmx2g -XX:ParallelGCThreads={params.gct_threads} \
-jar {input.picard} MarkDuplicates REMOVE_DUPLICATES=true \
INPUT={input.bam} OUTPUT={output.bam} M={output.metrics}
    """)


rule call_peaks_macs2_broad:
    input: "bams/{sample}.bam"
    params:
        tmp_dir="tmp",
        id="{sample}_broad_0.1",
        species=macs_species(config["genome"])
    output: "macs2_broad_0.1/{sample}_broad_0.1_peaks.broadPeak"
    shadow: "minimal"
    log: "macs2_broad_0.1/{sample}_broad_0.1_macs2.log"
    shell: with_log("""
mkdir -p macs2_broad_0.1;
cd macs2_broad_0.1;
mkdir -p {params.tmp_dir};
set +u;
source activate macs2;
set -u;
macs2 callpeak --tempdir {params.tmp_dir} -t ../{input} -f BAM -g {params.species} -n {params.id} --broad --broad-cutoff 0.1
    """)


rule call_peaks_macs2:
    input: "bams/{sample}.bam"
    params:
        tmp_dir="tmp",
        id="{sample}_q0.05",
        species=macs_species(config["genome"])
    output: "macs2_q0.05/{sample}_q0.05_peaks.narrowPeak"
    shadow: "minimal"
    log: "macs2_q0.05/{sample}_q0.05_macs2.log"
    shell: with_log("""
mkdir -p macs2_q0.05;
cd macs2_q0.05;
mkdir -p {params.tmp_dir};
set +u;
source activate macs2;
set -u;
macs2 callpeak --tempdir {params.tmp_dir} -t ../{input} -f BAM -g {params.species} -n {params.id} -q 0.05
    """)


rule call_peaks_sicer:
    input:
        bed="bams/pileup/{sample}.bed",
        chrom_sizes=rules.download_chrom_sizes.output
    output: "sicer/{sample}-W200-G600-E100.scoreisland"
    params:
        input_filename=lambda wildcards, input: os.path.basename(str(input.bed)),
        effective_genome_fraction=effective_genome_fraction(config["genome"], str(rules.download_chrom_sizes.output))
    shadow: "minimal"
    log: "sicer/{sample}_sicer.log"
    shell: with_log("""
set +u;
source activate macs2;
set -u;
SICER-rb.sh bams/pileup {params.input_filename} sicer {config[genome]} 1 200 \
150 {params.effective_genome_fraction} 600 100
    """)


rule download_span:
    output: "bin/span-0.9.2.jar"
    shell: 'curl --location https://download.jetbrains.com/biolabs/span/span-0.9.2.4618.jar '
           '--output {output}'


rule call_peaks_span:
    input:
        span=rules.download_span.output,
        chrom_sizes=rules.download_chrom_sizes.output,
        bam="bams/{sample}.bam"
    output: "span/{sample}_0.01_5.peak"
    threads: 4
    log: "span/logs/{sample}_0.01_5.log"
    shell: 'java -Xmx8G -jar {input.span} analyze -t {input.bam} --chrom.sizes {input.chrom_sizes} '
           '--fdr 0.01 --gap 5 --peaks {output} --workdir span --threads {threads}'
